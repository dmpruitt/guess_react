const readline = require("readline");
const rl = readline.createInterface(process.stdin, process.stdout);

// Global Variables
let correct = false; // used
let gameChoice = "0";
let gameOn = true;
let numTries = 0;
let prompt = "\n --> ";
let rangeMax = 100;
let rangeMin = 1;

function ask(questionText) {
  return new Promise((resolve, reject) => {
    rl.question(questionText, resolve);
  });
}

// Menu for user to select game
async function chooseGame() {
  gameChoice = await ask(
    ` Welcome! \n Which game would you like to play? \n [1.] Computer guesses your number \n [2.] You guess the computer's number \n [X] Press X key to exit. ${prompt}`
  );
  while (
    gameChoice.toLowerCase() !== "x" &&
    gameChoice.toLowerCase() !== "2" &&
    gameChoice.toLowerCase() !== "1"
  ) {
    gameChoice = await ask(
      ` \n Oops! Let's try this again \n Which game would you like to play? \n [1.] Computer guesses your number \n [2.] You guess the computer's number \n [X] Press X key to exit. ${prompt}`
    );
  }
}

//This is the First game where the computer guesses the user's number.
async function game1() {
  await rangeUser(); // user sets the max range

  let computerGuess = Math.floor((rangeMax - rangeMin) / 2 + rangeMin);
  let userAnswer = "a";
  numTries += 1;
  let secretNumber = 0; // place to store the user's secret number

  while (correct === false) {
    let userAnswerInRange = false; // used in the following loop to make sure the input is within the range set by the user for the game
    while (userAnswerInRange === false) {
      secretNumber = await ask(
        ` Please enter your secret number. \n It needs to be a whole number between ${rangeMin} to ${rangeMax} ${prompt}`
      );
      secretNumber = parseInt(secretNumber);
      if (secretNumber > rangeMin && secretNumber < rangeMax) {
        userAnswerInRange = true;
      } else {
        console.log(
          ` \n<<<< Your answer of ${secretNumber} is out of range. >>>> \n `
        );
      }
      // repeats until the entered number is within the range
    } // End of While userAnswerInRange

    // this loop will repeat until the correct answer is reached, or will exit if the user has cheated.
    while (
      userAnswer !== "h" ||
      userAnswer !== "l" ||
      userAnswer !== "y" ||
      userAnswer !== "n"
    ) {
      console.log(rangeMax);
      console.log(rangeMin);
      userAnswer = await ask(
        `My guess is ${computerGuess}. \n Is this correct? \[Y\] \n or \[N\] ${prompt}`
      );
      userAnswer = userAnswer[0].toLowerCase(); // cleaning up input

      if (userAnswer === "y") {
        // enter check in case user incorrectly enters a Y when their secrest number is a different number
        if (secretNumber === computerGuess) {
          correct = true;
          console.log(`Your number was ${computerGuess}!`);
          console.log(`This took ${numTries} tries.`);
          break;
        } else {
          console.log(
            ` Your answer of ${userAnswer} does not match your secret number of ${secretNumber}. \n We don't tolerate cheaters up in these parts! `
          );
        }
      }
      // This section is to catch when the range is just two numbers and it isn't the one guessed, therefore it must be other one.
      if (rangeMax - rangeMin < 3) {
        console.log("range low");
        if (secretNumber === rangeMax) {
          numTries += 1; //increments number of tries
          correct = true;
          console.log(`Your number was ${secretNumber}!`);
          console.log(`This took ${numTries} tries.`);
          break;
        } else {
          numTries += 1; //increments number of tries
          correct = true;
          console.log(`Your number was ${secretNumber}!`);
          console.log(`This took ${numTries} tries.`);
          break;
        }
      }
      userAnswer = await ask(
        `is your number \[H\]igher or \[L\]ower? ${prompt}`
      );
        // adjusts range and increments the number of tries and stores the next guess at the number
      if (userAnswer === "h") {
        rangeMin = computerGuess + 1;
        computerGuess = Math.floor((rangeMax - rangeMin) / 2 + rangeMin);
        numTries += 1; //increments number of tries
      } else {
        rangeMax = computerGuess - 1;
        computerGuess = Math.floor((rangeMax - rangeMin) / 2 + rangeMin);
        numTries += 1; //increments number of tries
        console.log(numTries);
      }
      // CHEATER CHECK this section checks the secretNumber again the range generated by their answers.
      // cheater check catches when the answer contradicts their answer
      if (secretNumber === computerGuess) {
        console.log(
          ` Your answer of ${userAnswer} does not match your secret number of ${secretNumber}. \n We don't tolerate cheaters up in these parts! `
        );
        process.exit();
      } else if (secretNumber > rangeMax) {
        // checks to see if their answer is truthful
        console.log(
          ` Your answer of ${userAnswer} is lower than your secret number. \n We don't tolerate cheaters up in these parts! `
        );
        process.exit();
      } else if (secretNumber < rangeMin) {
        console.log(
          ` Your answer of ${userAnswer} is higher than your secret number. \n We don't tolerate cheaters up in these parts! `
        );
        process.exit();
      }
    }
  }
  variablesReset(); // resetting the variables to start from scratch
  await playAgain(); // calls this function
  if (gameOn === true) {
    await game1();
  }
}
// This is the Second game where the user guesses the computer's number
async function game2() {
  await rangeUser(); // user sets the range

  let target = randomNum(rangeMin, rangeMax);
  let userGuess = 0;

  while (userGuess !== target) {
    userGuess = await ask(
      ` What is your guess at my number? \n It is from ${rangeMin} to ${rangeMax}. ${prompt}`
    );
    userGuess = parseFloat(userGuess);
    numTries += 1;
    //console.log(userGuess); // check

    if (isNaN(userGuess) || userGuess < rangeMin || userGuess > rangeMax) {
      console.log(
        ` Your answer of ${userGuess} is out of the range specified. \n We don't tolerate cheaters up in these parts! `
      );
      break;
    } else if (userGuess === target) {
      console.log(
        ` Great job! You guessed my number of ${target}! \n You took ${numTries} tries to find the answer.`
      );
    } else if (userGuess > target) {
      console.log(` Your entry of ${userGuess} was too High.`);
      rangeMax = userGuess - 1;
    } else {
      console.log(` Your entry of ${userGuess} was too Low.`);
      rangeMin = userGuess + 1;
    }
  }

  variablesReset(); // resetting the variables
  await playAgain(); // play again?

  if (gameOn === true) {
    await game2(); // recursive loop to repeat
  }
}

// Asks if player wants to go again, makes gameOn to true if yes
async function playAgain() {
  let playAgain = "a"; // initializes the variable to
  while (playAgain !== "y" && playAgain !== "n") {
    playAgain = await ask(
      ` Would you like to play again? \n \[Y\] or \[N\] ${prompt}`
    );
    playAgain = playAgain.toLowerCase();
  }
  if (playAgain === "y") {
    gameOn = true;
  } else {
    gameOn = false;
  }
  variablesReset(); // resetting the variables
}

// Random number generator creates a random integer between the min and max values
function randomNum(min, max) {
  let range = max - min + 1;
  return Math.floor(Math.random() * range) + min;
}

// asking user what the maximum range should be
async function rangeUser() {
  rangeMax = await ask(
    ` What would you like the highest number to be? \n Please enter a whole number greater than 1.${prompt}`
  );
  rangeMax = Math.round(parseInt(rangeMax));

  while (isNaN(rangeMax) || rangeMax <= 1) {
    // Check for Null or out of range ( <=1 )
    rangeMax = await ask(
      ` Oops! Let's try this again. \n Please enter a whole number greater than 1. ${prompt}`
    );

    rangeMax = Math.round(parseInt(rangeMax));
  } // End of Range input
}

// For resetting the variables
function variablesReset() {
  correct = false;
  numTries = 0;
  rangeMin = 1;
  rangeMax = 100;
}

// Main Program
async function start() {
  await chooseGame(); // Main Menu - Asks user which game they would like to play

  if (gameChoice === "1") {
    // Play game 1
    await game1();
  } else if (gameChoice === "2") {
    // Play game 2
    await game2();
  } else if (gameChoice === "x") {
    console.log("Goodbye!");
    process.exit();
  }

  if (gameOn !== true) {
    await start();
  }
}

start();